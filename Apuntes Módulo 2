Tuples
	# Create your first tuple, each element is indexed
		tuple1 = ("country",10,1.2 )
		tuple1
	# Print the variable on each index
		print(tuple1[0])
		print(tuple1[1])
		print(tuple1[2])
	# Print the type of value on each index, tuples can have any value type
		print(type(tuple1[0]))
		print(type(tuple1[1]))
		print(type(tuple1[2]))
	# Concatenate two tuples, you can concatenate multiple tuples
		tuple2 = tuple1 + ("jazz", 10)
		tuple2
	# We can slice tuples to obtain new ones
	# Slice from index 0 to index 2
		tuple2[0:3] #First three elements in tuple2
	# Get the length of tuple2
		len(tuple2)
	# A sample tuple
		Ratings = (0, 9, 6, 5, 10, 8, 9, 6, 2)
	# Sort sequence
		Ratings1 = sorted(Ratings)
		Ratings1
	# Create a nest tuple
		NestedT = (1,2('pop','rock'),(3,4),('disco',(1,2))) # There are four indexes in the first tuple, however it's got three nested tuples with individual
									 # Indexes, i.e.: NestedT[2][0] represents the value of the first index of the second element (nestedTuple)
	# You can access the string indexing itself by adding a third index, NestedT[2][0][0] represents letter 'p'. 
	#Tuple length
		len(tuple1)
----------------------------------------
Lists

	#To create list use [], with contents inside separated by commas. 
		L= [1,'pepe','ana',2]
	#Print index content
		L[0]: #1; with negative index use L[-4]:
	#Lists can contain any data type, including nested tuples and other lists. Lists have the same indexing principles as tuples. 
	
	#Use extend method to add new elements to list
		L= [1,'pepe','ana',2]
		L.extend(['pablo',3])
		L
	#If you use append, what you add will be added as a nested List within the existing list
	#Lists are mutable, we can change them
		A = ["pepe", 10]
		print('Before change:', A)
		A[0] = 'pablo'
		print('After change:', A)
	# Delete an element based on the index
		print('Before change:', A)
		del(A[0])
		print('After change:', A)
	#The method split slices every group of characters separated by a space into an element in a new list. 
		'hard rock'.split() # hard , rock 
	#You can also set a specific delimiter to create the separation
		'A,B,C,D'.split(',') # here the comma is the delimeter
	# Copy (reference) the list A
		A = ["hard rock", 10, 1.2] #changes performed on list A will reflect on list B
		B = A
		print('A:', A)
		print('B:', B)
	# Clone (clone by value) the list A
		B = A[:]			#changes aren't made on list B if we change values on list A
		B
-----------------------------------------
Sets
	# Sets are a unique collection of objects, use curly brackets and note that python will eliminate all duplicate items. 
		set1 = {"pop", "rock", "soul", "hard rock", "rock", "R&B", "rock", "disco"}
		set1
	# Convert List to set
		L = ['1','2','2','3']
		LSet = set(L)
		L
	# Add element to set
		L.add('4')
	# Remove element from set
		L.remove('4')
	# Verify if element is in the set
		'1' in L
	#Find intersection or elements in common of different sets
		intersection = set1 & set2
		set1.intersection(set2)
	# Find the difference in set1 but not set2
		set1.difference(set2)  
	# Find the union of two sets
		set1.union(set2)
	# Check if set is superset
		set(set1).issuperset(set2)   
	# Check if set is subset
		set(album_set2).issubset(album_set1)  
-----------------------------------------
Dictionaries
	# Create the dictionary
		Dict = {"k1": 1, "k2": "2", "k3": [3, 3, 3], "k4": (4, 4, 4), ('k5'): 5, (0, 1): 6}
		Dict
	#Keys can be strings, you can access values using the keys (k1,k2....)
	#Keys can also be immutable objects, like tuples (see key number 6 or index 5)
	# Create a sample dictionary
		release_year_dict = {"Thriller": "1982", "Back in Black": "1980", \
                    "The Dark Side of the Moon": "1973", "The Bodyguard": "1992", \
                    "Bat Out of Hell": "1977", "Their Greatest Hits (1971-1975)": "1976", \
                    "Saturday Night Fever": "1977", "Rumours": "1977"}
		release_year_dict
	# Get value by keys
		release_year_dict['Thriller'] #The key is thriller and its value is 1982
	# Get all the keys in dictionary
		release_year_dict.keys() 
	# Get all the values in dictionary
		release_year_dict.values() 
	# Append value with key into dictionary
		release_year_dict['Graduation'] = '2007' #Graduation is the key, value is 2007
		release_year_dict
	# Delete entries by key
		del(release_year_dict['Thriller'])
		del(release_year_dict['Graduation'])
		release_year_dict
	# Verify the key is in the dictionary
		'The Bodyguard' in release_year_dict
