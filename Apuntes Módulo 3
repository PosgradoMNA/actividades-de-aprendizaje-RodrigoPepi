#Module 3
#--------
#Conditions
	#Condition Statements
	#equal: ==
	#not equal: !=
	#greater than: >
	#less than: <
	#greater than or equal to: >=
	#less than or equal to: <=
	
	# Condition Equal
		a = 5
		a == 6 #Here the value a is set to equal 6, above the program asks if a is equal to another value, not setting it. 
	# Greater than Sign
		i = 6
		i > 5 #True
	# Greater than Sign
		i = 2
		i > 5 #False
	# Inequality Sign
		i = 2
		i != 6 #when we test for the inequality, only when i equals 6 (the inequality)we will receive a false return
	# Comparing Strings
		'pepe' == 'pepi' #false they aren't equal
		'pepe' != 'pepi' #true they aren't equal
	# Compare characters
		'B' > 'A'
		'BA' > 'AB' #with multiple characters the first letter takes precedence in ordering
#------------------------------------------
#If's
	# If statement example

		age = 19
	#age = 18

	#expression that can be true or false
		if age > 18:
    
    	#within an indent, we have the expression that is run if the condition is true
    			print("you can enter" )
	#You can also use else statements to add other output possibilities
		else:
    			print("Go see Tatiana" )
	#The statements after the if statement will run regardless if the condition is true or false
		print("move on")

	#The elif statement allows us to check additional conditions if the condition statements prior to it are false. 
	# Elif statment example
		age = 18
		if age > 18:
    			print("you can enter" )
		elif age == 18:
    			print("go see Cartel de Santa")
		else:
    			print("go see Tatiana")
		print("move on")

	# Condition statement example
		dog_year = 1983
	#dog_year = 1970
		if dog_year > 1980:
    			print("dog year is greater than 1980")
		else:
    			print("less than 1980")
		print('nice dog')

	# Condition statement example AND
		dog_year = 1980
		if(dog_year > 1979) and (dog_year < 1990):
    			print ("Dog year was in between 1980 and 1989")
		print("That's an old dog")
		
	# Condition statement example OR
		dog_year = 1990
		if(dog_year < 1980) or (dog_year > 1989):
    			print ("Dog was not born in the 1980's")
		else:
    			print("The Dog was born in the 1980's ")

	# Condition statement example NOT
		dog_year = 1983
		if not (dog_year == 1984):
    			print ("Dog year is not 1984")
#---------------------------------------------------------
#Loops
	# First think of ranges, where range(3) would generate an object containing elements ordered from 0 to 2
		range(3)
	# For loop example, the code is executed N times each time the value of i is increased for every execution, stopping when the range dates ends.
		dates = [1982,1980,1973]		
		N = len(dates)
		for i in range(N):
    			print(dates[i]) 
	# For loop to print a sequence from o to 7
		for i in range(0, 8):
    			print(i)
	# Exmaple of for loop, loop through list
		for year in dates:  
    			print(year)   
			dates = [1982,1980,1973]
	# Use for loop to change the elements in list
		squares = ['red', 'yellow', 'green', 'purple', 'blue']
		for i in range(0, 5):
    			print("Before square ", i, 'is',  squares[i])
    			squares[i] = 'white'
   			print("After square ", i, 'is',  squares[i])

	# The while loop will repeat itself only after a condition is found to not be True/False...
	# While Loop Example
		dates = [1982, 1980, 1973, 2000]
		i = 0
		year = dates[0]
		while(year != 1973):    
    			print(year)
    			i = i + 1
    			year = dates[i]
		print("It took ", i ,"repetitions to get out of loop.")
#--------------------------
#Functions

	# First function example: Add 1 to e and store as b

		def add(e):
    			"""
    			add 1 to e
    			"""
    			b = e + 1
    			print(e, "if you add one", b)
    			return(b)
	# Get a help on add function
		help(add)
	# Call the function add()
		add(1)
	# If you call the function add with a new input, 
	# Create different functions to multiply two numbers
	# Define a function for multiple two numbers
		def Mult(a, b):
    			c = a * b
    			return(c)
    			print('This is not printed')
		result = Mult(12,2)
		print(result)

	# Use mult() multiply two integers
		Mult(6, 7)
	# Use mult() multiply two floats
		Mult(13.0, 7.14)
	# Use mult() multiply two different type values together, any datatype can be mixed in use
		Mult(2, "Michael Jordan")

	# Function Definition, a is the formal parameter or global variable, variables inside the definition are local variables
		def square(a):
    	# Local variable z
    			z = 1
    			c = a * a + z
    			print(a, "if you square + 1", c) 
    			return(c)

	# Initializes Global variable  
		x = 3
	# Makes function call and return function a y
		y = square(x)
		y
	# Directly enter a number as parameter, this makes the function work with a direct new parameter
		square(2)
	# Define functions, one with return value None and other without return value
		def MJ():
    			print('Michael Jackson')
		def MJ1():
    			print('Michael Jackson')
    			return(None)
	# Printing the function after a call shows that None is the default return statement
	# To see what functions returns are, use print(function())
	# Concatenation is an effective way to mix two strings using the addition operation, the def con is the function; but the + makes the concatenation
		def con(a, b):
    			return(a + b)
	# e and f calculation block1
		e1 = 4
		f1 = 5
		c1 = e1 + f1 + 2 * e1 * f1 - 1
		if(c1 < 0):
    			c1 = 0 
		else:
    			c1 = 5
		c1   
	# g and h calculation block2
		g2 = 0
		h2 = 0
		c2 = g2 + h2 + 2 * g2 * h2 - 1
		if(c2 < 0):
    			c2 = 0 
		else:
		    c2 = 5
		c2   
	# You can replace most of the previously shown code when you define a function, this way you can call a process without writing the code again
		def Equation(a,b):
    			c = a + b + 2 * a * b - 1
    			if(c < 0):
        			c = 0 
    			else:
        			c = 5
    			return(c) 
	# The value of the initial parameters must be written prior to the definition, although idk if they could change afterwards when calling the function again

	#Predefined functions
	#print() prints outputs or given inputs
	#sum() adds all elements in a list or tuple
	#len() length of a list or tuple

	# Function example, using return() is useful when there are IF statements within a function
		def type_of_dog(dog, breed, year_released):
    			print(dog, breed, year_released)
    			if year_released > 1980:
        			return "Modern"
    			else:
        			return "Oldie"
		x = type_of_dog("Max", "Boxer", 1980)
		print(x)
	# you can use loops to print out each element on a list
		def PrintList(list):
    			for element in list:
        			print(element)	

	#Setting default arguments for values in custom functions; the given value 8 is a threshold of what we consider good
		def isGoodScore(score=8): 
    			if(rating < 8):
        			print("this dog sucks it's rating is",rating)
          		else:
        			print("this dog is good its rating is",rating)

	# Example of global variable, in this case dog is the global variable, if we tried to print the value of internal_var1 since it isn't a global variable it will 
	# be lost and we'll get an error
		dog = "Michael Jackdog"
		def printer1(dog):
    			internal_var1 = dog
    			print(dog, "is a rockstar")
		printer1(dog)
	# you could use the global function to create a global variable from a local variable
		dog = "Michael Jackdog"
		def printer1(dog):
			global internal_var1
    			internal_var1 = dog
    			print(dog, "is a rockstar")
		printer1(dog)
-------------------------------------------
#Collections and Functions, when the number of arguments are unknown in a function
		def printAll(*arguments): # All the arguments are 'packed' into args which can be treated like a tuple
    			print("No of arguments:", len(arguments)) 
    			for argument in args:
        		print(arguments)
	#printAll with 3 arguments
		printAll('Horse','Creed','Stone')
	#printAll with 4 arguments
		printAll('Sidekick','Short Island','Waterslide','Carrot')
-------------------------------------------
#Classes
	# Create a class Circle
	# Import the library
		import matplotlib.pyplot as plt
		%matplotlib inline  
	# class is the Class definition, Circle is the name of Class, and what is in the parentheses is the Class parent not necessarily an object
		class Circle(object):
	# method __init__ initializes the object, the inputs are the data attributes; the term self contains all atributes in the set. 
	# self.color gives the value of the color attribute, and self.radius gives the radius of the object
	# Create a class Circle
		class Circle(object):
    	# Declaration of values for the circle
    			def __init__(self, radius=4, color='red'):
        			self.radius = radius
        			self.color = color 
    # Method add the value of r to the attribute radius
    			def add_radius(self, r):
        			self.radius = self.radius + r
       		 	return(self.radius)
    # Method will print the circle as if its centre were placed on points 0,0 in x,y axis. 
    			def drawCircle(self):
        			plt.gca().add_patch(plt.Circle((0, 0), radius=self.radius, fc=self.color))
       		 	plt.axis('scaled')
        			plt.show()  
	# Instance of blue circle
		BlueCircle = Circle(1,'blue')
	# Available methods to use the object's methods
		dir(BlueCircle)
	# Print the object attribute radius and color
		BlueCircle.radius
		BlueCircle.color
	# We can also set values to attributes directly
		BlueCircle.radius = 1
		BlueCircle.radius
	# Draw Circle method
	# Methods to change the object attribute value
		BlueCircle.drawCircle()
		print('Radius of object:',BlueCircle.radius)
		BlueCircle.add_radius(2)
		print('Radius of object of after applying the method add_radius(1):',BlueCircle.radius)
		BlueCircle.add_radius(5)
		print('Radius of object of after applying the method add_radius(3):',BlueCircle.radius)

	# Create a rectangle with height, width and color
		class Rectangle(object):
    	# Constructor
    		def __init__(self, width=5, height=4, color='b'):
        		self.height = height 
        		self.width = width
        		self.color = color  
     # Method
    		def drawRectangle(self):
        		plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))
       		plt.axis('scaled')
        		plt.show()	
	# Create a new skinny rectangle, print all attribute values, and draw the rectangle
		ThinRedRectangle = Rectangle(5,4,'red')
		ThinRedRectanble.height
		ThinRedRectanble.width
		ThinRedRectanble.color
	# replace()
	# lower()
	# split()
	# count()
	
	# Reference excercise
		import sys
		sampleMap = {'eirmod': 1,'sed': 1, 'amet': 2, 'diam': 5, 'consetetur': 1, 'labore': 1, 'tempor': 1, 'dolor': 1, 'magna': 2, 'et': 3, 'nonumy': 1, 'ipsum': 1, 'lorem': 2}
		def testMsg(passed):
    			if passed:
       			return 'Test Passed'
    			else :
       			return 'Test Failed'
		print("Constructor: ")
		try:
    			samplePassage = analysedText("Lorem ipsum dolor! diam amet, consetetur Lorem magna. sed diam nonumy eirmod tempor. diam et labore? et diam magna. et diam amet.")
    			print(testMsg(samplePassage.fmtText == "lorem ipsum dolor diam amet consetetur lorem magna sed diam nonumy eirmod tempor diam et labore et diam magna et diam amet"))
		except:
    			print("Error detected. Recheck your function " )
		print("freqAll: ")
		try:
    			wordMap = samplePassage.freqAll()
    			print(testMsg(wordMap==sampleMap))
		except:
    			print("Error detected. Recheck your function " )
		print("freqOf: ")
		try:
    			passed = True
    				for word in sampleMap:
        				if samplePassage.freqOf(word) != sampleMap[word]:
            				passed = False
            				break
    	 			print(testMsg(passed))
		except:
    			print("Error detected. Recheck your function  " )
