#Module 4
--
# Read from a file
	Line1.read()
# Open a File
	File = open("C:\User\Docs\Folder\Example.txt",w")
# Argument is the file path and the mode, the modes are r' for reading, w' for writting and a' for append
# Using method .mode will show the data mode attribute used by the object
	File.mode
# Use method .close() to close files
	File.close()
# Using the with statement will automatically close the files that are opened by it
	with open("Example.txt",'a') as File:
		file_things=File.append()
		print(file_things)
	print(File.closed)
	print(file_things)
# The method read, stores the values of the file in the declared variable as a string
# You can check if the file content is closed, but you cannot read from it outside the indent
# Alternatively you can print the file content outside the indent as well
# When examining raw string the '\n' will appear to show python the start of a new line
# With method readlines you can group every element (text line) in a list
	with open("Example.txt",'r') as File:
		file_things=File.readline()
		print(file_things)
# With the previous command, the file_things value will be the first line of text from our File
# Calling this method multiple times in a row will make it iterate the value of each call to the next element of the File
	with open("Example.txt",'r') as File:
		for line in File:
		print(line)
# With the previous code you print all lines individually
# Characters in text can be recognized with the same indexing properties as a regular string
	with open("Example.txt",'r') as File:
		file_things=File.readlines(12)
		print(file_things)
		file_things=File.readlines(3)
# The arguments in the method are declaring how long is the string that wants to be extracted, calling it multiple times in a row will make it look for the length
# of string to extract but in the next line
---------
# Writing files with Open
	# Fileobject.write("Text that will go in the file")
		File = open("C:\User\Docs\Folder\Example.txt","w")
		with open("C:\User\Docs\Folder\Example.txt","w") as FileEx:
			FileEx.write("This is a Test")
	# This creates a new file in the selected directory
		FileEx.write("This is line 1\n")
		FileEx.write("This is line 2\n")
	# This adds to different lines of text to the file
	  	Lines1=["L1","L2","L3"]
			with open("C:\User\Docs\Folder\Example.txt","w") as FileEx:
				for line in Lines1:
					FileEx.write(line)
	# Add all members of a list to a new txt file with a for Loop

	# Copy an existing file to a new file
	# Using a for loop will move all the lines of the file to the new file, in the end they are both closed
		with open("C:\User\Docs\Folder\Example.txt","r") as readfile:
			with open("C:\User\Docs\Folder\Example1.txt","w") as writefile:
				for line in readfile: 
					writefile.write(line)
--------
#Loading Data with Pandas
	# Pandas is a library for data analys
		import pandas as pd # Import the library, use the as pd to shorten the length of pandas to be used in the code; although other term could be used
		csv_path='file.csv'
		df=pd.read_csv(csv-path) # Tedious and slow with pandas, faster and easier with pd; df means dataframe
		df.head() # Used to examine the first five rows of a dataframe
	#Read excel files
		xlsx_path='file.xlsx'
		df=pd.read_excel(xlsx-path)
		df.head
	# Since dataframes are comprised of rows and columns, you can create a dataframe from a dictionary, the Keys correspond to the column labels, whilst the values
	# correspond to the rows
	
	# To create a dataframe from a column
		x=df[['Column-Name']]
	# The same can be done for multiple column headers, just encolse them in double brackets
		x=df[['Column-Name','Column-name1','...']]
	# Access different index values
		df.ix[0,0]:'First Row & Column'
		df.ix[1,0]:'Second Row & First Column'
		df.ix[0,2]:'First Row & Third Column'
	# You can also use the column names for indexing, i.e.: df.ix[0,'Column-Name']
		w=df.ix[0:2,0:4] # This will create a new dataframe comprised of the selected rows and columns, this is effective for slicing
	# Alternatively you can do the same with the column names
		w=df.ix[0:2,'ColName1':'ColName2']
--------------
#Working with and Saving Data with Pandas
	# Method to count distinct values with method unique() 
		df['dataframe'].unique() # It'll only output unique values
	# You can set the function to look for unique values after an inequality 
		df['dataframe']>= x # All values in the selected dataframe column will create an output of boolean values that will declare if the condition is or isn't met
	# To select the specified columns which value is true then you must code
		df1=df[dfdf['dataframe']>= x] # You assign the inequality result to another variable in this case df1
	# Afterwards your created dataset will contain only the values that meet the condition requirements
		df1.to_csv('new_file.csv') # The method .to_csv will save your files in a csv format
